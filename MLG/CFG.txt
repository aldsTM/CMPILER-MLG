//fixed
main,mainFunc funcList
mainFunc,PRESS START { code }
funcList,funcDec funcList
funcList,

code,code_segment code
code,

//did you forget this?
code_segment,conditional
code_segment,non_cond_code_segment

non_cond_code_segment,varDec !
non_cond_code_segment,constDec !

//fixed
non_cond_code_segment,arrDec !

//code_segment,identifiers
non_cond_code_segment,assignment !
non_cond_code_segment,funcCall !
non_cond_code_segment,loop
non_cond_code_segment,fuckTheUniverse !
non_cond_code_segment,return !
non_cond_code_segment,!

varDec,dataType identifiers
constDec,CANTTOUCHTHIS dataType assignment

// int
dataType,mmr
// float
dataType,kdr
// char
dataType,char
// string
dataType,SAMPLETEXT
// boolean
dataType,isMLG

//fixed
identifiers,IDENTIFIER &com; identifiers
identifiers,assignment &com; identifiers
identifiers,IDENTIFIER
identifiers,assignment

//fixed
assignment,IDENTIFIER = assignment
assignment,IDENTIFIER = expr
assignment,IDENTIFIER = comparative
//assignment,IDENTIFIER = funcCall

//fixed
expr,expr + expr2
expr,expr - expr2
expr,expr2
expr2,expr2 * expr3
expr2,expr2 / expr3
expr2,expr2 % expr3
expr2,expr3
expr3,( expr )
expr3,expr4
expr4,+ expr4
expr4,- expr4
expr4,expr5
expr5,++ IDENTIFIER
expr5,-- IDENTIFIER
expr5,IDENTIFIER ++
expr5,IDENTIFIER --
expr5,literal
expr5,literal2
expr5,literal3
expr5,NOT literal3
//expr5,( comparative )
expr5,IDENTIFIER
expr5,IDENTIFIER [ arrIndex ]
expr5,funcCall

arrIndex,int
arrIndex,IDENTIFIER
arrIndex,IDENTIFIER [ arrIndex ]

//changed
literal,int
literal2,float
literal2,char
literal2,string
literal3,boolean

funcDec,dataType IDENTIFIER ( funcParams ) { code }
funcDec,dataType IDENTIFIER ( ) { code }

funcParams,dataType IDENTIFIER &com; funcParams
funcParams,dataType IDENTIFIER

funcCall,IDENTIFIER ( funcCallParams )
funcCall,print ( expr )
funcCall,println ( expr )
funcCall,println ( )
funcCall,scanf

return,GGWP expr

scanf,SONG NAME ? ( dataType &com; IDENTIFIER )

//fixed
funcCallParams,expr
funcCallParams,expr &com; funcCallParams
funcCallParams,

//this is redundant IF expr can produce an IDENTIFIER
//funcCallParams,IDENTIFIER
//funcCallParams,IDENTIFIER &com; funcCallParams

//fixed
comparative,comparative AND comparative2
comparative,comparative2
comparative2,comparative2 OR comparative3
comparative2,comparative3
comparative3,NOT ( comparative3 )
//comparative3,literal3
//comparative3,NOT literal3
comparative3,comparative4
comparative4,expr < expr
comparative4,expr <= expr
comparative4,expr > expr
comparative4,expr >= expr
comparative4,expr == expr
comparative4,expr != expr
comparative4,( comparative )

//fixed
code_block,non_cond_code_segment
code_block,{ code }

conditional,ILLUMINATI CONFIRMED ( comparative ) code_block

//is this what you meant for else?
conditional,ILLUMINATI CONFIRMED ( comparative ) code_block m WHATCHASAY conditional
conditional,ILLUMINATI CONFIRMED ( comparative ) code_block m WHATCHASAY code_block

m,M m
m,

loop,SMOKE WEED code_block EVERYDAY ( comparative )
loop,EVERYDAY ( comparative ) code_block
loop,FOR TWENTY ( varDec ; comparative ; assignment ) code_block

//DECLARING arrays
arrDec,dataType [ ] IDENTIFIER
arrDec,dataType [ ] arrAssignment

arrAssignment,IDENTIFIER = NEW DICK SIZE arrSize INCHES
arrAssignment,IDENTIFIER = { arrVals }
arrSize,[ int ]
arrVals,expr &com; arrVals
arrVals,expr

// only activate these if we plan to support multi-dimensional arrays
//arrAssignment,IDENTIFIER = arrValues


//arrSize,[ int ] arrSize
//arrSize,[ int ]

// arrValues,{ arrVals }
//arrValues,{ arrVals } arrValues
//arrValues,{ arrVals }
